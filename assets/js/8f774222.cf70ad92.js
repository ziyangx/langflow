"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[8661],{12378:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>h,contentTitle:()=>c,default:()=>l,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"Components/components-memories","title":"Memories","description":"Memory components store and retrieve chat messages by session_id.","source":"@site/docs/Components/components-memories.md","sourceDirName":"Components","slug":"/components-memories","permalink":"/components-memories","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Memories","slug":"/components-memories"},"sidebar":"docs","previous":{"title":"Logic","permalink":"/components-logic"},"next":{"title":"Models","permalink":"/components-models"}}');var r=t(74848),i=t(28453);const d={title:"Memories",slug:"/components-memories"},c="Memory components in Langflow",h={},a=[{value:"Use a memory component in a flow",id:"use-a-memory-component-in-a-flow",level:2},{value:"AstraDBChatMemory Component",id:"astradbchatmemory-component",level:2},{value:"Inputs",id:"inputs",level:3},{value:"Outputs",id:"outputs",level:3},{value:"CassandraChatMemory Component",id:"cassandrachatmemory-component",level:2},{value:"Inputs",id:"inputs-1",level:3},{value:"Outputs",id:"outputs-1",level:3},{value:"Mem0 Chat Memory",id:"mem0-chat-memory",level:2},{value:"Inputs",id:"inputs-2",level:3},{value:"Outputs",id:"outputs-2",level:3},{value:"Redis Chat Memory",id:"redis-chat-memory",level:2},{value:"Inputs",id:"inputs-3",level:3},{value:"Outputs",id:"outputs-3",level:3},{value:"ZepChatMemory Component",id:"zepchatmemory-component",level:2},{value:"Inputs",id:"inputs-4",level:3},{value:"Outputs",id:"outputs-4",level:3}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"memory-components-in-langflow",children:"Memory components in Langflow"})}),"\n",(0,r.jsxs)(s.p,{children:["Memory components store and retrieve chat messages by ",(0,r.jsx)(s.code,{children:"session_id"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"They are distinct from vector store components, because they are built specifically for storing and retrieving chat messages from external databases."}),"\n",(0,r.jsxs)(s.p,{children:["Memory components provide access to their respective external databases ",(0,r.jsx)(s.strong,{children:"as memory"}),". This allows Large Language Models (LLMs) or ",(0,r.jsx)(s.a,{href:"/components-agents",children:"agents"})," to access external memory for persistence and context retention."]}),"\n",(0,r.jsx)(s.h2,{id:"use-a-memory-component-in-a-flow",children:"Use a memory component in a flow"}),"\n",(0,r.jsxs)(s.p,{children:["This example flow stores and retrieves chat history from an ",(0,r.jsx)(s.strong,{children:"Astra DB Chat Memory"})," component with ",(0,r.jsx)(s.strong,{children:"Store Message"})," and ",(0,r.jsx)(s.strong,{children:"Chat Memory"})," components."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.strong,{children:"Store Message"})," helper component stores chat memories as ",(0,r.jsx)(s.a,{href:"/concepts-objects",children:"Data"})," objects, and the ",(0,r.jsx)(s.strong,{children:"Message History"})," helper component retrieves chat messages as ",(0,r.jsx)(s.a,{href:"/concepts-objects",children:"Data"})," objects or strings."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"Sample Flow storing Chat Memory in AstraDB",src:t(72654).A+"",width:"3178",height:"1228"})}),"\n",(0,r.jsx)(s.h2,{id:"astradbchatmemory-component",children:"AstraDBChatMemory Component"}),"\n",(0,r.jsxs)(s.p,{children:["This component creates an ",(0,r.jsx)(s.code,{children:"AstraDBChatMessageHistory"})," instance, which stores and retrieves chat messages using Astra DB, a cloud-native database service."]}),"\n",(0,r.jsx)(s.h3,{id:"inputs",children:"Inputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"collection_name"}),(0,r.jsx)(s.td,{children:"String"}),(0,r.jsx)(s.td,{children:"Name of the Astra DB collection for storing messages. Required."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"token"}),(0,r.jsx)(s.td,{children:"SecretString"}),(0,r.jsx)(s.td,{children:"Authentication token for Astra DB access. Required."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"api_endpoint"}),(0,r.jsx)(s.td,{children:"SecretString"}),(0,r.jsx)(s.td,{children:"API endpoint URL for the Astra DB service. Required."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"namespace"}),(0,r.jsx)(s.td,{children:"String"}),(0,r.jsx)(s.td,{children:"Optional namespace within Astra DB for the collection."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"session_id"}),(0,r.jsx)(s.td,{children:"MessageText"}),(0,r.jsx)(s.td,{children:"Chat session ID. Uses current session ID if not provided."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"outputs",children:"Outputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"message_history"}),(0,r.jsx)(s.td,{children:"BaseChatMessageHistory"}),(0,r.jsx)(s.td,{children:"An instance of AstraDBChatMessageHistory for the session."})]})})]}),"\n",(0,r.jsx)(s.h2,{id:"cassandrachatmemory-component",children:"CassandraChatMemory Component"}),"\n",(0,r.jsxs)(s.p,{children:["This component creates a ",(0,r.jsx)(s.code,{children:"CassandraChatMessageHistory"})," instance, enabling storage and retrieval of chat messages using Apache Cassandra or DataStax Astra DB."]}),"\n",(0,r.jsx)(s.h3,{id:"inputs-1",children:"Inputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"database_ref"}),(0,r.jsx)(s.td,{children:"MessageText"}),(0,r.jsx)(s.td,{children:"Contact points for Cassandra or Astra DB database ID. Required."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"username"}),(0,r.jsx)(s.td,{children:"MessageText"}),(0,r.jsx)(s.td,{children:"Username for Cassandra (leave empty for Astra DB)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"token"}),(0,r.jsx)(s.td,{children:"SecretString"}),(0,r.jsx)(s.td,{children:"Password for Cassandra or token for Astra DB. Required."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"keyspace"}),(0,r.jsx)(s.td,{children:"MessageText"}),(0,r.jsx)(s.td,{children:"Keyspace in Cassandra or namespace in Astra DB. Required."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"table_name"}),(0,r.jsx)(s.td,{children:"MessageText"}),(0,r.jsx)(s.td,{children:"Name of the table or collection for storing messages. Required."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"session_id"}),(0,r.jsx)(s.td,{children:"MessageText"}),(0,r.jsx)(s.td,{children:"Unique identifier for the chat session. Optional."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"cluster_kwargs"}),(0,r.jsx)(s.td,{children:"Dictionary"}),(0,r.jsx)(s.td,{children:"Additional keyword arguments for Cassandra cluster configuration. Optional."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"outputs-1",children:"Outputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"message_history"}),(0,r.jsx)(s.td,{children:"BaseChatMessageHistory"}),(0,r.jsx)(s.td,{children:"An instance of CassandraChatMessageHistory for the session."})]})})]}),"\n",(0,r.jsx)(s.h2,{id:"mem0-chat-memory",children:"Mem0 Chat Memory"}),"\n",(0,r.jsx)(s.p,{children:"The Mem0 Chat Memory component retrieves and stores chat messages using Mem0 memory storage."}),"\n",(0,r.jsx)(s.h3,{id:"inputs-2",children:"Inputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Display Name"}),(0,r.jsx)(s.th,{children:"Info"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"mem0_config"}),(0,r.jsx)(s.td,{children:"Mem0 Configuration"}),(0,r.jsx)(s.td,{children:"Configuration dictionary for initializing Mem0 memory instance."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"ingest_message"}),(0,r.jsx)(s.td,{children:"Message to Ingest"}),(0,r.jsx)(s.td,{children:"The message content to be ingested into Mem0 memory."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"existing_memory"}),(0,r.jsx)(s.td,{children:"Existing Memory Instance"}),(0,r.jsx)(s.td,{children:"Optional existing Mem0 memory instance."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"user_id"}),(0,r.jsx)(s.td,{children:"User ID"}),(0,r.jsx)(s.td,{children:"Identifier for the user associated with the messages."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"search_query"}),(0,r.jsx)(s.td,{children:"Search Query"}),(0,r.jsx)(s.td,{children:"Input text for searching related memories in Mem0."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"mem0_api_key"}),(0,r.jsx)(s.td,{children:"Mem0 API Key"}),(0,r.jsx)(s.td,{children:"API key for Mem0 platform (leave empty to use the local version)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"metadata"}),(0,r.jsx)(s.td,{children:"Metadata"}),(0,r.jsx)(s.td,{children:"Additional metadata to associate with the ingested message."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"openai_api_key"}),(0,r.jsx)(s.td,{children:"OpenAI API Key"}),(0,r.jsx)(s.td,{children:"API key for OpenAI. This item is required if you use OpenAI embeddings without a provided configuration."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"outputs-2",children:"Outputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Display Name"}),(0,r.jsx)(s.th,{children:"Info"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"memory"}),(0,r.jsx)(s.td,{children:"Mem0 Memory"}),(0,r.jsx)(s.td,{children:"The resulting Mem0 Memory object after ingesting data."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"search_results"}),(0,r.jsx)(s.td,{children:"Search Results"}),(0,r.jsx)(s.td,{children:"The search results from querying Mem0 memory."})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"redis-chat-memory",children:"Redis Chat Memory"}),"\n",(0,r.jsx)(s.p,{children:"This component retrieves and stores chat messages from Redis."}),"\n",(0,r.jsx)(s.h3,{id:"inputs-3",children:"Inputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Display Name"}),(0,r.jsx)(s.th,{children:"Info"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"host"}),(0,r.jsx)(s.td,{children:"hostname"}),(0,r.jsx)(s.td,{children:"IP address or hostname."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"port"}),(0,r.jsx)(s.td,{children:"port"}),(0,r.jsx)(s.td,{children:"Redis Port Number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"database"}),(0,r.jsx)(s.td,{children:"database"}),(0,r.jsx)(s.td,{children:"Redis database."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"username"}),(0,r.jsx)(s.td,{children:"Username"}),(0,r.jsx)(s.td,{children:"The Redis user name."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"password"}),(0,r.jsx)(s.td,{children:"Password"}),(0,r.jsx)(s.td,{children:"The password for username."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"key_prefix"}),(0,r.jsx)(s.td,{children:"Key prefix"}),(0,r.jsx)(s.td,{children:"Key prefix."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"session_id"}),(0,r.jsx)(s.td,{children:"Session ID"}),(0,r.jsx)(s.td,{children:"Session ID for the message."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"outputs-3",children:"Outputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Display Name"}),(0,r.jsx)(s.th,{children:"Info"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"memory"}),(0,r.jsx)(s.td,{children:"Memory"}),(0,r.jsx)(s.td,{children:"The Redis chat message history object"})]})})]}),"\n",(0,r.jsx)(s.h2,{id:"zepchatmemory-component",children:"ZepChatMemory Component"}),"\n",(0,r.jsxs)(s.p,{children:["This component creates a ",(0,r.jsx)(s.code,{children:"ZepChatMessageHistory"})," instance, enabling storage and retrieval of chat messages using Zep, a memory server for Large Language Models (LLMs)."]}),"\n",(0,r.jsx)(s.h3,{id:"inputs-4",children:"Inputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"url"}),(0,r.jsx)(s.td,{children:"MessageText"}),(0,r.jsx)(s.td,{children:"URL of the Zep instance. Required."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"api_key"}),(0,r.jsx)(s.td,{children:"SecretString"}),(0,r.jsx)(s.td,{children:"API Key for authentication with the Zep instance."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"api_base_path"}),(0,r.jsx)(s.td,{children:"Dropdown"}),(0,r.jsx)(s.td,{children:'API version to use. Options: "api/v1" or "api/v2".'})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"session_id"}),(0,r.jsx)(s.td,{children:"MessageText"}),(0,r.jsx)(s.td,{children:"Unique identifier for the chat session. Optional."})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"outputs-4",children:"Outputs"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"message_history"}),(0,r.jsx)(s.td,{children:"BaseChatMessageHistory"}),(0,r.jsx)(s.td,{children:"An instance of ZepChatMessageHistory for the session."})]})})]})]})}function l(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>d,x:()=>c});var n=t(96540);const r={},i=n.createContext(r);function d(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(i.Provider,{value:s},e.children)}},72654:(e,s,t)=>{t.d(s,{A:()=>n});const n=t.p+"assets/images/astra_db_chat_memory_rounded-9746ca2bb69d3b07ac0a071f4b9471b3.png"}}]);